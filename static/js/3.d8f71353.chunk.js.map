{"version":3,"sources":["components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/AddPostForm/AddPostForm.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MyPostsContainer.jsx","components/Profile/ProfileInfo/ProfileStatusWithHooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["module","exports","Post","props","className","s","item","src","message","likesCounter","maxLength10","maxLengthCreator","AddPostFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","placeholder","component","Textarea","name","validate","required","MyPosts","React","memo","postsElements","posts","reverse","map","p","postsBlock","AddPostForm","values","addPost","newPostText","MyPostsContainer","connect","state","profilePage","dispatch","actionCreatorAddPost","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onDoubleClick","onChange","e","currentTarget","value","autoFocus","onBlur","updateStatus","ProfileInfo","profile","descriptionBlock","photos","large","aboutMe","Preloader","Profile","ProfileContainer","userId","this","match","params","authorizedUserId","history","push","getUserProfile","getStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/3.d8f71353.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__3AMKI\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__3NBK5\",\"posts\":\"MyPosts_posts__1bX5x\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__HKGh_\"};","import React from 'react';\r\nimport s from './Post.module.css';\r\n\r\n\r\nconst Post = (props) => {\r\n  return (\r\n        <div className={s.item}>\r\n          <img src=\"https://www.freevector.com/uploads/vector/preview/12675/FreeVector-Man-Vector-Avatar.jpg\"></img>\r\n          {props.message}\r\n          <div>\r\n            <span>like</span>{props.likesCounter}\r\n          </div>\r\n      </div>\r\n  )\r\n}\r\n\r\nexport default Post;\r\n","import React from 'react'\r\nimport { reduxForm, Field } from 'redux-form'\r\nimport {maxLengthCreator, required} from '../../../../utils/validators/validators'\r\nimport {Textarea} from '../../../../FormsControls/FormsControls'\r\n\r\nconst maxLength10 = maxLengthCreator(10);\r\n\r\nconst AddPostFormPage = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n        <div>\r\n        <div><Field placeholder='Add new post' component={Textarea} name='newPostText' validate={[required, maxLength10]} placeholder=\"Add new post\" /></div>\r\n          <div>\r\n            <button >Add post</button>\r\n            </div>\r\n        </div>\r\n        </form> \r\n    )\r\n}\r\n\r\nconst AddPostFormRedux = reduxForm({\r\n    form: 'profile-add-post'\r\n})(AddPostFormPage)\r\n\r\n\r\n\r\nexport default AddPostFormRedux;","import React from 'react';\r\nimport s from './MyPosts.module.css';\r\nimport Post from './Post/Post';\r\nimport AddPostFormRedux from './AddPostForm/AddPostForm'\r\n\r\n\r\n\r\n\r\nconst MyPosts = React.memo (props =>  {\r\n\r\n  let onAddPost = (values) => {\r\n    props.addPost(values.newPostText);\r\n  }\r\n\r\n  \r\n\r\n\r\n  let postsElements =  [...props.posts].reverse().map( p => <Post message={p.name} likesCounter={p.likesCounter} /> );\r\n\r\n  return (\r\n    <div className={s.postsBlock}>\r\n      <h3>My posts</h3>\r\n      <AddPostFormRedux onSubmit={onAddPost} />\r\n      \r\n      <div className={s.posts}>\r\n    {postsElements}\r\n     </div>\r\n   </div >\r\n    \r\n  )\r\n\r\n})\r\n\r\nexport default MyPosts;\r\n","import React from 'react';\r\nimport MyPosts from './MyPosts';\r\nimport {actionCreatorAddPost} from './../../../redux/profile-reducer';\r\nimport { connect } from 'react-redux';\r\n\r\n\r\n\r\nconst mapStateToProps = (state) =>{\r\nreturn {\r\n  posts: state.profilePage.posts,\r\n  newPostText: state.profilePage.newPostText\r\n}\r\n}\r\n\r\nconst mapDispatchTooProps = (dispatch) => {\r\n  return {\r\n    addPost: (newPostText) => {\r\n      dispatch(actionCreatorAddPost(newPostText))\r\n    }\r\n    \r\n  }\r\n}\r\n\r\nconst MyPostsContainer = connect(mapStateToProps,mapDispatchTooProps) (MyPosts);\r\n\r\n\r\n\r\nexport default MyPostsContainer;\r\n","import React, { useState, useEffect } from 'react';\r\nimport s from './ProfileInfo.module.css'\r\n\r\n\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    \r\n\r\n    const activateEditeMode =() => {\r\n      \r\n        setEditMode(true);\r\n       \r\n\r\n    }\r\n\r\n    const deactivateEditeMode =() => {\r\n       \r\n        setEditMode(false);\r\n        props.updateStatus(status);\r\n \r\n     }\r\n\r\n    const onStatusChange = (e) => {\r\n         \r\n        setStatus(e.currentTarget.value)\r\n\r\n     }\r\n\r\n     useEffect( () => {\r\n        setStatus(props.status)\r\n     },[props.status])\r\n\r\n    \r\n\r\n        return <div>\r\n            <div>{!editMode &&\r\n                <div>\r\n                 <span onDoubleClick={activateEditeMode}>{props.status || \"---\"}</span>\r\n                </div>\r\n                }\r\n            </div>\r\n            {editMode &&\r\n           <div>\r\n            <input onChange={onStatusChange} autoFocus={true} onBlur={deactivateEditeMode}  value={status}/>\r\n           </div>\r\n           }\r\n        </div>\r\n\r\n    \r\n}\r\n\r\nexport default ProfileStatusWithHooks;","import React  from 'react';\r\nimport s from './ProfileInfo.module.css';\r\nimport Preloader from '../../common/Preloader/Preloader';\r\nimport ProfileStatusWithHooks from './ProfileStatusWithHooks';\r\n\r\n\r\nconst ProfileInfo = ({profile,status,updateStatus}) => {\r\n \r\n  if (!profile){\r\n  return <Preloader/>\r\n  }\r\n  return (\r\n  <div className={s.descriptionBlock}>    \r\n    <div>\r\n      \r\n      <img src={profile.photos.large}/>\r\n      <div>\r\n        {profile.aboutMe}\r\n      </div>\r\n      Ava+description\r\n\r\n      <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n  </div>\r\n \r\n  </div>\r\n  )\r\n}\r\n\r\nexport default ProfileInfo;\r\n","import React from 'react';\r\nimport MyPostsContainer from './MyPosts/MyPostsContainer';\r\nimport ProfileInfo from \"./ProfileInfo/ProfileInfo\";\r\n\r\n\r\nconst Profile = (props) => {\r\n  \r\n  return (\r\n  <div>\r\n    <ProfileInfo profile = {props.profile} status={props.status} updateStatus={props.updateStatus} />\r\n    <MyPostsContainer />\r\n    </div>\r\n    ) \r\n  \r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport Profile from './Profile'\r\nimport {connect} from 'react-redux'\r\nimport {getUserProfile,getStatus,updateStatus} from '../../redux/profile-reducer'\r\nimport { withRouter} from 'react-router-dom';\r\nimport { compose } from 'redux';\r\n\r\n\r\n\r\nclass ProfileContainer extends React.Component {\r\n\r\n  componentDidMount() {\r\n    \r\n    let userId = this.props.match.params.userId;\r\n    if (!userId) {\r\n      userId = this.props.authorizedUserId;\r\n      if (!userId) {\r\n        this.props.history.push(\"/login\")\r\n      }\r\n    }    \r\n\r\n    this.props.getUserProfile(userId);\r\n    this.props.getStatus(userId);\r\n\r\n    \r\n\r\n  }\r\n\r\nrender() {\r\n  //console.log(\"RENDER PROFILE\");\r\n  \r\n  return (\r\n  <div>\r\n    <Profile {...this.props} profile={this.props.profile} status={this.props.status} \r\n    updateStatus ={this.props.updateStatus}/>\r\n    </div>\r\n    ) \r\n  \r\n}\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\nprofile: state.profilePage.profile,\r\nstatus: state.profilePage.status,\r\nauthorizedUserId: state.auth.userId,\r\nisAuth: state.auth.isAuth\r\n})\r\n\r\n\r\n\r\nexport default compose(\r\n  connect(mapStateToProps, {getUserProfile,getStatus,updateStatus}),\r\n  withRouter,\r\n  /*withAuthRedirect*/\r\n) (ProfileContainer);\r\n\r\n"],"sourceRoot":""}